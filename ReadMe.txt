/project-root
â”‚
â”œâ”€â”€ /api
â”‚   â”œâ”€â”€ /employee
â”‚   â”‚   â”œâ”€â”€ create.php
â”‚   â”‚   â”œâ”€â”€ login.php
â”‚   â”‚   â””â”€â”€ list.php
â”‚   â”‚
â”‚   â”œâ”€â”€ /project
â”‚   â”‚   â”œâ”€â”€ create.php
â”‚   â”‚   â”œâ”€â”€ list.php
â”‚   â”‚   â””â”€â”€ update.php
â”‚   â”‚
â”‚   â”œâ”€â”€ /task
â”‚   â”‚   â”œâ”€â”€ create.php
â”‚   â”‚   â”œâ”€â”€ assign.php
â”‚   â”‚   â”œâ”€â”€ list.php
â”‚   â”‚   â”œâ”€â”€ /comments
â”‚   â”‚   â”‚   â”œâ”€â”€ post.php        // Threaded + @mention support
â”‚   â”‚   â”‚   â””â”€â”€ read.php
â”‚   â”‚   â”œâ”€â”€ /files
â”‚   â”‚   â”‚   â”œâ”€â”€ upload.php      // File upload API
â”‚   â”‚   â”‚   â””â”€â”€ list.php
â”‚   â”‚   â””â”€â”€ reminders.php       // Scheduled task alerts (cron-compatible)
â”‚
â”œâ”€â”€ /config
â”‚   â”œâ”€â”€ db.php                  // DB connection
â”‚   â”œâ”€â”€ auth.php                // JWT or session-based auth
â”‚   â”œâ”€â”€ roles.php               // Role-based middleware logic
â”‚   â””â”€â”€ config.php              // Global constants, file paths, etc.
â”‚
â”œâ”€â”€ /middleware
â”‚   â”œâ”€â”€ authMiddleware.php      // Auth check
â”‚   â””â”€â”€ rbacMiddleware.php      // Role-based access control
â”‚
â”œâ”€â”€ /logs
â”‚   â””â”€â”€ admin_actions.log       // Logs stored here
â”‚
â”œâ”€â”€ /uploads
â”‚   â””â”€â”€ /tasks                  // Task file uploads
â”‚
â”œâ”€â”€ /utils
â”‚   â”œâ”€â”€ response.php            // Standard API responses
â”‚   â”œâ”€â”€ validate.php            // Input validation functions
â”‚   â””â”€â”€ logger.php              // Admin action logger
â”‚
â””â”€â”€ index.php                   // Entry or test route


ðŸ”µ 1. config â€“ Start Here
Create these files first:

db.php â€“ DB connection using PDO

config.php â€“ Global constants like file paths, allowed roles

roles.php â€“ Role definitions (e.g., manager = 1, lead = 2)

âœ… Purpose: Sets the base to access DB and constants from any file.

ðŸ”µ 2. utils
response.php â€“ Utility for consistent JSON responses

validate.php â€“ Input sanitization and custom validation

logger.php â€“ Admin logging function

âœ… Purpose: Helps you avoid rewriting code for every API response, logging, etc.

ðŸ”µ 3. middleware
authMiddleware.php â€“ Auth check (session or JWT)

rbacMiddleware.php â€“ Role-based access control (e.g., only manager can create projects)

âœ… Purpose: Protect your APIs using reusable functions.

ðŸ”µ 4. logs
admin_actions.log â€“ Create the file, and logger.php will write to it.

âœ… Purpose: Logging system is ready from Day 1.

ðŸ”µ 5. uploads
/tasks/ folder â€“ Create this for file uploads later

Make sure itâ€™s writable (chmod 755)

âœ… Purpose: Prepare structure for file upload feature (even if added later).

ðŸ”µ 6. api
Now begin actual API module coding in this order:

ðŸ”¹ employee/
create.php â€“ Registration

login.php â€“ Auth

list.php â€“ List employees

â¬† This unlocks login & role-based access for rest of the modules.

ðŸ”¹ project/
create.php â€“ Manager only

list.php â€“ All roles

update.php â€“ Manager only

ðŸ”¹ task/
create.php â€“ Manager & Lead

assign.php â€“ Assign to employee

list.php â€“ Task list by role or project

ðŸ”¹ task/comments/
post.php â€“ Add comment (with parent ID for threading)

read.php â€“ Read threaded comments

ðŸ”¹ task/files/
upload.php â€“ Upload task-related files

list.php â€“ List all files for a task

ðŸ”¹ task/reminders.php
API to return overdue or upcoming tasks

âœ… Final: index.php (optional)
Only use index.php if you want to route or test APIs manually. Otherwise, direct access to /api/*/*.php is clean and fine.